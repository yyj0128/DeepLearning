
1. github 본인 계정에 sql 이라는 이름으로 새로운 원격 저장소 생성
 - github.com에 접속해서 작업
 - Your repositories -> new버튼 클릭
 - sql폴더명으로 생성(원격 저장소 준비 단계)

2. D:\A_TeachingMaterial\2.Oracle\other\sql 폴더를 git 로컬 저장소 초기화
 - source tree 접속해서 작업
 - 새탭추가 create로 초기화, 목적지 경로에 sql폴더 생성(D:\A_TeachingMaterial\2.Oracle\other\sql)
 - 이미 있는데 만들거냐?예, 로컬의 git폴더에 .git 폴더 생성 확인
 - 저장소 -> 저장소 설정 -> 추가 (origin(ip주소 지명 연결?), 로컬경로 입력)
 - 로컬 디렉토리에 .git폴더 생성확인
www.naver.com ==> DNS서버 =>123.122.50.1

3. 2번의 로컬 저장소와 1번의 원격 저장소를 연결 설정
 - source tree에서 계속 작업
 - 저장소 -> 저장소 설정

4.test.txt(파일 내용은 test) commit 후 원격저장소에 반영
woring directory     staging area	local repository	remote repository
	==>	                ==>                      ==>
      add(드래그&드랍)        commit(메시지)             push

-노트패드에 로컬sql폴더 안에 test.txt 파일 생성 작업
-스테이지 올리기
-코멘트 작성 후 커밋, 오리진 마스터 체크하기 푸시 클릭(커밋과 푸시 동시에됨)
-그럼 s tree에 master-origin 연결 동기화 확인

git-scm.com
GUI client

source tree(client)      ==>  git
SQL developer(client)  ==>  oracle(DBMS) server
클라이언트 프로그램               

--------------------------------------------------------------------------------------------------------------------------------------

< DB 수업 시작 >

호스트 이름 : localhost
포트(2의16승개 연결통로) : 1251


데이터는 작업 후 컴퓨터를 끄면 데이터 사라짐 -> 그래서 파일 형태로 저장 시켜 데이터를 보존
텍스트파일(사람이 인식), 바이너리파일(2진파일, (예)동영상, 음악파일))

파일 공유 시 여러사람 동시 열람시 첫번째 사용자는 파일 편집 가능, 두번째 사람부터는 읽기 전용만 가능
파일은 전용 프로그램 필요, 동시접속 불가 (파일 시스템의 단점)

데이터를 효과적으로 관리할 시스템 -> DBMS(data base management system)
Java 언어를 통해 DBMS와 통신  DB-Server-브라우저, 단말기(안드로이드, IOS)

File system vs DBMS
File system : 데이터중복, 복구미흡, 보안/공유 미흡, 프로그램이 파일에 종속
DBMS : 데이터 중복 방지(무결성), 백업/복구, 보안/공유, SQL표준에 따른 프로그램 비종속

수업목표
- 데이터 모델링을 보고, 주어진 조건을 만족하는 SQL을 작성 할 수 있다.
- JAVA 프로그램을 통해 SQL을 실행 할 수 있다.

▣ DBMS
-DataBase : 여러사람에 의해 공유될 목적으로 저장된 데이터의 집합
  인사시스템 : 직원/급여/조직/발렴
  코레일 예약 시스템 : 노선/좌석/티켓/예약/결제
DBMS 
1. 데이터베이스를 관리하며, 다른 응용프로그램이 데이터베이스를 공유하며 사용 할 수 있는 환경(DBMS도 한글, 엑셀과 같은 프로그램)
2. 데이터 백업/복구
3. 속도, 공유, 동시 접근, 안전성, 안정성, 확장성
4. racle, ms sql, mysql, maiadb, db2...

트랜잭션 : 여러 단계의 과정을 하나의 작업 행위로 묶는 단위, 원자성(All or Nothing), 일관성, 격리성, 지속성
출금O->atm->입금O
출금O->atm->입금X
 (<-출금취소)

▣ SQL(Structured Query Language) : 구조화된 질의 언어
⊙ DMBS와 통신하기 위한 유일한 수단
1. DDL(Data Definition Language) : 데이터 정의 
2. DML(Data Manipulation Language) : 데이터 조작
3. DCL(Data Contron Language) : 데이터 제어
4. TCL(Transaction Control Language) : 트랜잭션 제어
⊙ 쉬운 문법
⊙ 집합적 사고
 - how(어떻게?)가 없다
  · 일반적인 프로그래밍 언어와 다르게 로직이 없다 -> 그래서 쉬울 수도 / 어려울 수도 있다
 - 필요한 데이터 집합을 SQL을 통해 표현
  · 해당 조건에 맞는 데이터는  DBMS가 알아서 찾는다
  · 개발자는 숙제를 내주는 선생님
    ex : emp테이블에서 사원번호가 7365 보다 큰사원의 이름, 입사일자를 조회
      어떻게 찾아오라는 내용이 없음

■ 정형/비정형 데이터
○ RDBMS
-안정성, 무결성
-제조업, 금융, 회계 등 데이터의 일치가 중요한 시스템
○ NOSQL
-유연한 데이터구조
-한두건쯤 누락되도 문제 없는 데이터
-센서자료, SNS분석, 통계치
○ 한쪽이 우월한 개념이 아님. 목적에 따라 선택

dbms 마이그레이션 : dbms 이전
쿼리를 잘짠다? SELECT문을 잘짠다

■Table
○ 데이터베이스에서 가장 많이 사용하는 객체
○ 데이터를 저장하는 2차원 구조의 저장소
 - ROW(행) : 테이블의 가로방향
 - COL(열) : 테이블의 세로방향

■SQL 공통사항
○ 대소문자를 가리지 않음 
 - SELECT, Select, select 전부 동일
○ 여러줄에 걸쳐 작성 가능
 - 단 KEYWORD는 한줄에 표현(ex: select, from)
○ SQL의 종료는 ; (Semicolon)
○ 수업시간 coding rule
 - keyword : 대문자
  · SELECT : O / select : X
  · TO_CHAR : O / to_char : X
 - 그외 : 소문자

SELECT
 SELECT * | { column [alias], ...}
 FROM table [alias]
 [ORDER BY column];
 ○ select
 ○ from

*******************우선 관리자계정(system)으로 설정 해줘야함**********************
--table space 생성
SELECT *
FROM DBA_DATA_FILES;

CREATE TABLESPACE TS_DBSQL
DATAFILE 'D:\B_UTIL\4.ORACLE\APP\ORACLE\ORADATA\XE\TS_DBSQL.DBF' 
SIZE 100M 
AUTOEXTEND ON;

--사용자 추가
create user nnzic identified by java (계정, 비밀번호)
default tablespace TS_DBSQL (TS_DBSQL 기본 작업 공간인 테이블스페이스)
temporary tablespace temp (임시작업 공간)
quota unlimited on TS_DBSQL (TS_DBSQL 테이블 스페이스는 제한 없이 사용 가능)
quota 0m on system; (시스템 계정에 저장공간 허용하지 않음)

--접속, 생성권한
GRANT CONNECT, RESOURCE TO NNZIC;














